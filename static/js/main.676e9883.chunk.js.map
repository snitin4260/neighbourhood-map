{"version":3,"sources":["utils/googleMaps.js","utils/foursquareVenue.js","Sidebar.js","MenuButton.js","App.js","serviceWorker.js","index.js"],"names":["loadMaps","Promise","resolve","reject","window","resolveGoogleMapsPromise","google","console","log","script","document","createElement","src","concat","async","body","appendChild","venues","url","fetch","SideBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","textInput","React","createRef","_this2","visibility","visible","react_default","a","id","aria-hidden","String","className","tabIndex","onMouseDown","handleMouseDown","onKeyDown","closeKeyEnter","role","value","query","placeholder","onChange","e","changeQuery","target","filteredHotels","length","map","hotel","i","key","onClick","showMarker","listItemEnter","venue","name","Component","MenuButton","hambKeyPress","App","state","nQuery","setState","trim","filterHotels","toggleMenu","matchMarker","markers","filter","marker","infoWindow","setContent","title","address","open","getAnimation","setAnimation","maps","Animation","BOUNCE","setTimeout","event","keyCode","which","all","then","res","places","json","largeInfoWindow","InfoWindow","bounds","LatLngBounds","response","groups","items","Map","getElementById","zoom","center","lat","location","lng","allhotels","forEach","item","formattedAddress","Marker","position","animation","DROP","extend","self","push","addListener","populateInfoWindow","fitBounds","join","close","catch","alert","_this3","toLowerCase","includes","setVisible","aria-label","src_MenuButton_0","Sidebar","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","src_App_0","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.676e9883.chunk.js","sourcesContent":["function loadMaps() {\n  return new Promise(function(resolve, reject) {\n    // define the global callback that will run when google maps is loaded\n    window.resolveGoogleMapsPromise = function() {\n      // resolve the google object\n      resolve(window.google);\n      console.log(\"inside promise\");\n      // delete the global callback to tidy up since it is no longer needed\n      delete window.resolveGoogleMapsPromise;\n    };\n\n    const script = document.createElement(\"script\");\n    const API_KEY = \"AIzaSyDOS3gAaYOUVX9N38VpLaq83f0rBOqdnjs\";\n    script.src = `https://maps.googleapis.com/maps/api/js?libraries=places&key=${API_KEY}&callback=resolveGoogleMapsPromise`;\n    script.async = true;\n    document.body.appendChild(script);\n  });\n}\n\nexport default loadMaps;\n","function venues() {\n  let CLIENT_ID = \"1AFXV1IRQN4EEHGVWMRRHBHXW5FRNUVNGVVPMT3ZMVDJ2G5O\";\n  let CLIENT_SECRET = \"XQENZ00BUK5KVM43NRHVFZYPXPOATFKFAVR4VHJLIBJBFTR3\";\n  let v = \"20181125\";\n  let place = \"Sydney\";\n  let query = \"food\";\n\n  let url = `https://api.foursquare.com/v2/venues/explore?near=${place}&query=${query}&client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}&v=${v}`;\n\n  return fetch(url);\n}\n\nexport default venues;\n","import React, { Component } from \"react\";\nimport \"font-awesome/css/font-awesome.min.css\";\n\nclass SideBar extends Component {\n  constructor(props) {\n    super(props);\n    this.textInput = React.createRef();\n  }\n\n  render() {\n    let visibility = \"hide\";\n\n    if (this.props.visible) {\n      visibility = \"show\";\n    }\n    return (\n      <div\n        id=\"sidebar\"\n        aria-hidden={String(!this.props.visible)}\n        className={visibility}\n      >\n        <div\n          id=\"close\"\n          tabIndex=\"0\"\n          onMouseDown={this.props.handleMouseDown}\n          onKeyDown={this.props.closeKeyEnter}\n        >\n          <button>\n            {\" \"}\n            <i className=\"fa fa-window-close fa-3x\"> </i>\n          </button>\n        </div>\n        <input\n          id=\"filter-input\"\n          tabIndex=\"0\"\n          role=\"search\"\n          value={this.props.query}\n          placeholder=\"Filter Hotels\"\n          onChange={e => {\n            this.props.changeQuery(e.target.value);\n          }}\n        />{\" \"}\n        <i className=\"fa fa-filter fa-2x  \" />\n        {this.props.filteredHotels &&\n          this.props.filteredHotels.length > 0 &&\n          this.props.filteredHotels.map((hotel, i) => (\n            <div\n              key={i}\n              tabIndex=\"0\"\n              className=\"sidebar-item\"\n              onClick={() => {\n                this.props.showMarker(hotel);\n              }}\n              onKeyDown={e => {\n                this.props.listItemEnter(e, hotel);\n              }}\n            >\n              {\" \"}\n              {hotel.venue.name}{\" \"}\n            </div>\n          ))}{\" \"}\n      </div>\n    );\n  }\n}\n\nexport default SideBar;\n","import React, { Component } from \"react\";\nimport \"./MenuButton.css\";\n\nclass MenuButton extends Component {\n  render() {\n    let visibility = String(this.props.visible);\n\n    return (\n      <button\n        tabIndex=\"0\"\n        aria-hidden={visibility}\n        id=\"roundButton\"\n        onMouseDown={this.props.handleMouseDown}\n        onKeyDown={this.props.hambKeyPress}\n      >\n        {\" \"}\n      </button>\n    );\n  }\n}\n\nexport default MenuButton;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport loadMaps from \"./utils/googleMaps\";\nimport venues from \"./utils/foursquareVenue\";\nimport SideBar from \"./Sidebar\";\nimport MenuButton from \"./MenuButton\";\n\nclass App extends Component {\n  state = {\n    query: \"\",\n    filteredHotels: [],\n    visible: false\n  };\n\n  componentDidMount() {\n    Promise.all([loadMaps(), venues()])\n      .then(res => {\n        let google = res[0];\n        let places = res[1].json();\n        this.google = google;\n        let largeInfoWindow = new google.maps.InfoWindow();\n        this.infoWindow = largeInfoWindow;\n        this.bounds = new google.maps.LatLngBounds();\n        this.markers = [];\n\n        //promise\n        places\n          .then(res => {\n            return res.response.groups[0].items;\n          })\n          .then(items => {\n            this.map = new google.maps.Map(document.getElementById(\"map\"), {\n              zoom: 11,\n              center: {\n                lat: items[0].venue.location.lat,\n                lng: items[0].venue.location.lng\n              }\n            });\n            //we are having a refernce  to all hotel since\n            // in component 's state will display only\n            //filtered hotles\n            this.allhotels = items;\n            this.setState({ filteredHotels: this.allhotels });\n            items.forEach(item => {\n              console.log(item.venue.location.formattedAddress);\n              let marker = new google.maps.Marker({\n                map: this.map,\n                position: {\n                  lat: item.venue.location.lat,\n                  lng: item.venue.location.lng\n                },\n                title: item.venue.name,\n                animation: google.maps.Animation.DROP,\n                id: item.venue.id,\n                address: item.venue.location.formattedAddress\n              });\n              this.bounds.extend(marker.position);\n              let self = this;\n\n              this.markers.push(marker);\n              marker.addListener(\"click\", function() {\n                populateInfoWindow(this, largeInfoWindow);\n                if (marker.getAnimation() !== null) {\n                  marker.setAnimation(null);\n                } else {\n                  marker.setAnimation(self.google.maps.Animation.BOUNCE);\n                }\n                setTimeout(() => {\n                  marker.setAnimation(null);\n                }, 400);\n              });\n            });\n            //map extends to fit markers\n            this.map.fitBounds(this.bounds);\n            //show info window if not laready showing for that particular\n            //window\n            let populateInfoWindow = (marker, infoWindow) => {\n              if (infoWindow.marker !== marker) {\n                infoWindow.marker = marker;\n                infoWindow.setContent(\n                  `<div>${marker.title}<br><p></p>${marker.address.join(\n                    \" \"\n                  )}</p></div>`\n                );\n                infoWindow.open(this.map, marker);\n                infoWindow.addListener(\"closeclick\", function() {\n                  infoWindow.close();\n                });\n              }\n            };\n          });\n      })\n      .catch(e => {\n        alert(e);\n      });\n  }\n  //Input controlled by component through query\n  changeQuery = nQuery => {\n    this.setState(\n      {\n        query: nQuery.trim()\n      },\n      this.filterHotels\n    );\n  };\n  toggleMenu = () => {\n    this.setState({\n      visible: !this.state.visible\n    });\n  };\n\n  handleMouseDown = e => {\n    this.toggleMenu();\n  };\n\n  showMarker = hotel => {\n    //find the marker via unique id\n    let matchMarker = this.markers.filter(marker => {\n      return marker.id === hotel.venue.id;\n    });\n\n    //open infoview of matched marker\n    this.infoWindow.marker = matchMarker[0];\n    this.infoWindow.setContent(\n      `<div>${matchMarker[0].title}<br><p>${matchMarker[0].address}</p></div>`\n    );\n    this.infoWindow.open(this.map, matchMarker[0]);\n\n    //animate  marker\n\n    if (matchMarker[0].getAnimation() !== null) {\n      matchMarker[0].setAnimation(null);\n    } else {\n      matchMarker[0].setAnimation(this.google.maps.Animation.BOUNCE);\n    }\n    setTimeout(() => {\n      matchMarker[0].setAnimation(null);\n    }, 400);\n  };\n\n  closeKeyEnter = event => {\n    var code = event.keyCode || event.which;\n    if (code === 13) {\n      this.handleMouseDown();\n    }\n  };\n\n  listItemEnter = (event, hotel) => {\n    var code = event.keyCode || event.which;\n    if (code === 13) {\n      this.showMarker(hotel);\n    }\n  };\n\n  hambKeyPress = event => {\n    console.log(event.target);\n    var code = event.keyCode || event.which;\n    if (code === 13) {\n      this.handleMouseDown();\n    }\n  };\n\n  /***** ******************************************/\n\n  filterHotels() {\n    this.infoWindow.close();\n    let filteredHotels = this.allhotels.filter(hotel => {\n      return hotel.venue.name\n        .toLowerCase()\n        .includes(this.state.query.toLowerCase());\n    });\n\n    this.setState({\n      filteredHotels\n    });\n    this.markers.forEach(marker => {\n      let query = this.state.query.toLowerCase();\n      let markerTitle = marker.title.toLowerCase();\n\n      markerTitle.includes(query)\n        ? marker.setVisible(true)\n        : marker.setVisible(false);\n    });\n  }\n  /********************** *********************************/\n\n  render() {\n    return (\n      <main>\n        <header id=\"header\" role=\"banner\">\n          <h1>Neighbourhood Map</h1>\n        </header>\n        <div id=\"map\" aria-label=\"location\" role=\"application\">\n          {\" \"}\n        </div>\n        <MenuButton\n          handleMouseDown={this.handleMouseDown}\n          visible={this.state.visible}\n          hambKeyPress={this.hambKeyPress}\n        />\n        <SideBar\n          value={this.state.query}\n          changeQuery={this.changeQuery}\n          filteredHotels={this.state.filteredHotels}\n          showMarker={this.showMarker}\n          visible={this.state.visible}\n          handleMouseDown={this.handleMouseDown}\n          closeKeyEnter={this.closeKeyEnter}\n          listItemEnter={this.listItemEnter}\n        />\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}